name: Publish Python Package

on:
  workflow_dispatch:
  push:
    branches: ['main']
    paths:
      - 'python/**'

jobs:
  deploy:
    runs-on: ubuntu-latest
    permissions:
      id-token: write # Required for trusted publishing
      contents: write # Required to push tags and commit version updates
    environment: pypi

    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'
      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build twine pytest
      - name: Run tests
        run: |
          cd python
          python -m pytest tests/ -v
      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 10 # Match user's pnpm version
          run_install: true

      - name: Version Python package using Changesets
        # This step runs changesets to update python/package.json,
        # then extracts that version and updates setup.py
        working-directory: python
        run: |
          echo "Initializing pnpm project..."
          touch pnpm-workspace.yaml
          pnpm init

          # Extract current version from setup.py
          CURRENT_VERSION=$(grep "version=['\"]" setup.py | cut -d "'" -f 2 | cut -d '"' -f 2)
          if [ -z "$CURRENT_VERSION" ]; then
            echo "Error: Could not extract current version from setup.py."
            exit 1
          fi
          echo "Current version from setup.py: $CURRENT_VERSION"

          pnpm pkg set name=brainyflow
          pnpm pkg set version=$CURRENT_VERSION # Use extracted version

          echo "Running changeset version..."
          # Run changesets. This might create/update package.json in the current dir (python/)
          pnpm dlx @changesets/cli version

          echo "Extracting potential new version from python/package.json..."
          NEW_VERSION=$(grep '"version":' package.json | cut -d '"' -f 4)
          if [ -z "$NEW_VERSION" ]; then
            echo "Error: Could not extract version from python/package.json even though the file exists."
            exit 1
          fi

          echo "Comparing versions: Current ($CURRENT_VERSION) vs Potential New ($NEW_VERSION)"
          if [ "$CURRENT_VERSION" == "$NEW_VERSION" ]; then
            echo "No version change detected in python/package.json."
            echo "Exiting step gracefully as no version bump occurred."
            exit 0 # Exit successfully, no publish needed
          fi

          # Version has changed, proceed with update
          echo "Version changed to $NEW_VERSION. Updating setup.py..."
          # Use a temporary file for sed compatibility on different systems (like macOS)
          sed -i.bak "s/version=['\"].*['\"]/version='$NEW_VERSION'/" setup.py
          rm setup.py.bak # Remove backup file
          echo "setup.py content after update:"
          cat setup.py

      - name: Prepare README
        working-directory: python
        run: |
          cp ../README.md .

      - name: Build Python package
        working-directory: python
        run: |
          python -m build
      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          packages-dir: python/dist/
          skip-existing: true

      - name: Commit and push version bump
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          commit_message: 'chore: update PY version and publish'
          file_pattern: 'python/setup.py python/.changeset/*'
          # The action defaults to pushing to the branch that triggered the workflow (main)
          # It also uses the github-actions[bot] user by default
